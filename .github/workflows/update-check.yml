name: Check for Updates

on:
  schedule:
    - cron: '0 0 * * *'  # 每天运行
  workflow_dispatch:      # 允许手动触发

jobs:
  check-and-build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Check libmaxminddb for updates
      id: check
      run: |
        # 设置默认版本
        DEFAULT_VERSION="1.12.2"
        
        # 尝试获取最新版本
        LATEST_VERSION=$(curl -s https://api.github.com/repos/maxmind/libmaxminddb/releases/latest | jq -r .tag_name)
        
        # 如果获取失败，使用默认版本
        if [ "$LATEST_VERSION" = "null" ] || [ -z "$LATEST_VERSION" ]; then
          VERSION="$DEFAULT_VERSION"
        else
          VERSION="$LATEST_VERSION"
        fi
        
        # 输出版本信息
        echo "使用版本: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "new_version=$VERSION" >> $GITHUB_OUTPUT
        echo "update_needed=true" >> $GITHUB_OUTPUT

    - name: Setup build environment
      if: steps.check.outputs.update_needed == 'true'
      run: |
        brew install automake autoconf libtool
        
    - name: Create build script
      if: steps.check.outputs.update_needed == 'true'
      run: |
        # 使用 base64 编码和解码来避免特殊字符问题
        echo "${{ secrets.BUILD_SCRIPT }}" | base64 -d > build-script.sh
        chmod +x build-script.sh

    - name: Clone libmaxminddb
      if: steps.check.outputs.update_needed == 'true'
      run: |
        git clone https://github.com/maxmind/libmaxminddb.git
        cd libmaxminddb
        git checkout "${{ env.VERSION }}"
        cd ..
        
    - name: Build XCFramework
      if: steps.check.outputs.update_needed == 'true'
      run: |
        pwd
        ls -la
        ./build-script.sh
        
    - name: Prepare Release Assets
      if: steps.check.outputs.update_needed == 'true'
      run: |
        cd "${PROJECT_ROOT}"
        # 打包整个 SwiftPM 包
        cd PackageOutput
        zip -r ../MaxMindDBSwift-${{ env.VERSION }}.zip MaxMindDBSwift/

    - name: Create Release
      if: steps.check.outputs.update_needed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        files: MaxMindDBSwift-${{ env.VERSION }}.zip
        body: |
          Updated to libmaxminddb version ${{ env.VERSION }}
          
          ### Installation
          
          Add the following to your Package.swift:
          ```swift
          dependencies: [
              .package(url: "https://github.com/wlgemini/MaxMindDBSwift.git", from: "${{ env.VERSION }}")
          ]
          ```
          
          Or add the package dependency in Xcode:
          1. File > Add Packages...
          2. Enter package URL: `https://github.com/wlgemini/MaxMindDBSwift.git`
          3. Select "Up to Next Major Version" with "${{ env.VERSION }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Clean Build Files
      if: steps.check.outputs.update_needed == 'true'
      run: |
        rm -rf MaxMindDBSwift-*.zip
        rm -rf PackageOutput
        rm -rf build-script.sh
        rm -rf install
        rm -rf libmaxminddb
        
    - name: Update Version File
      if: steps.check.outputs.update_needed == 'true'
      run: |
        echo "${{ env.VERSION }}" > .version
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .version
        git commit -m "Update to version ${{ env.VERSION }}"
        git push 