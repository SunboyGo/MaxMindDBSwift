name: Check for Updates

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时检查一次
  workflow_dispatch:      # 允许手动触发

jobs:
  check-and-update:
    runs-on: macos-latest
    
    steps:
    - name: Checkout with token
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT }}  # 使用PAT确保有推送标签的权限
        fetch-depth: 0  # 获取完整历史
      
    - name: Install jq
      run: |
        brew install jq
      
    - name: Check libmaxminddb for updates
      id: check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 获取最新版本
        echo "Fetching latest version from GitHub API..."
        API_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/maxmind/libmaxminddb/releases/latest)
        echo "API Response received"
        
        # 使用jq解析JSON (比grep更可靠)
        if echo "$API_RESPONSE" | jq -e . > /dev/null 2>&1; then
          LATEST_VERSION=$(echo "$API_RESPONSE" | jq -r .tag_name)
        else
          echo "Error: Invalid JSON response from API"
          echo "Response: $API_RESPONSE"
          exit 1
        fi
        
        # 移除版本号前的 'v' 如果存在
        LATEST_VERSION=${LATEST_VERSION#v}
        
        # 使用当前版本
        CURRENT_VERSION="1.12.1"  
        
        echo "Latest version from API: $LATEST_VERSION"
        echo "Current version: $CURRENT_VERSION"
        
        if [ "$LATEST_VERSION" = "$CURRENT_VERSION" ]; then
          echo "No updates available"
          echo "update_needed=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 克隆并更新源码
        git clone https://github.com/maxmind/libmaxminddb.git temp
        cd temp
        git checkout $LATEST_VERSION
        
        # 删除旧版本
        rm -rf "../Sources/CLibMaxMindDB/libmaxminddb-${CURRENT_VERSION}"
        
        # 复制所有必需文件
        mkdir -p "../Sources/CLibMaxMindDB/libmaxminddb-${LATEST_VERSION}/include"
        mkdir -p "../Sources/CLibMaxMindDB/libmaxminddb-${LATEST_VERSION}/src"
        
        # 复制源文件
        cp src/maxminddb.c "../Sources/CLibMaxMindDB/libmaxminddb-${LATEST_VERSION}/src/"
        cp src/data-pool.c "../Sources/CLibMaxMindDB/libmaxminddb-${LATEST_VERSION}/src/"
        
        # 复制头文件
        cp include/maxminddb.h "../Sources/CLibMaxMindDB/libmaxminddb-${LATEST_VERSION}/include/"
        
        # 复制内部头文件
        cp src/data-pool.h "../Sources/CLibMaxMindDB/libmaxminddb-${LATEST_VERSION}/src/"
        cp src/maxminddb-compat-util.h "../Sources/CLibMaxMindDB/libmaxminddb-${LATEST_VERSION}/src/"
        
        # 更新配置文件
        cat > "../Sources/CLibMaxMindDB/libmaxminddb-${LATEST_VERSION}/include/maxminddb_config.h" << EOF
        #ifndef MAXMINDDB_CONFIG_H
        #define MAXMINDDB_CONFIG_H
        
        #define PACKAGE_VERSION "${LATEST_VERSION}"
        
        #ifndef _WIN32
        #define HAVE_MMAP 1
        #endif
        
        #endif
        EOF
        
        cd ..
        rm -rf temp
        
        # 设置版本号
        echo "LIBMAXMINDDB_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
        VERSION="1.0.${GITHUB_RUN_NUMBER}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "update_needed=true" >> $GITHUB_OUTPUT
        
        # 更新 Package.swift
        sed -i '' "s/libmaxminddb-[0-9.][0-9.]*\/src/libmaxminddb-${LATEST_VERSION}\/src/g" Package.swift
        sed -i '' "s/libmaxminddb-[0-9.][0-9.]*\/include/libmaxminddb-${LATEST_VERSION}\/include/g" Package.swift
        
        # 更新 module.modulemap
        sed -i '' "s/libmaxminddb-[0-9.][0-9.]*\/include/libmaxminddb-${LATEST_VERSION}\/include/g" Sources/CLibMaxMindDB/module.modulemap

    - name: Run build script
      if: steps.check.outputs.update_needed == 'true'
      env:
        BUILD_SCRIPT: ${{ secrets.BUILD_SCRIPT }}
      run: |
        # 创建并运行构建脚本
        echo "$BUILD_SCRIPT" > ./build.sh
        chmod +x ./build.sh
        ./build.sh
        rm ./build.sh  # 删除脚本防止泄露

    - name: Commit and tag
      if: steps.check.outputs.update_needed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 添加所有更改
        git add -A
        
        # 提交更改
        git commit -m "Update libmaxminddb to version ${{ env.LIBMAXMINDDB_VERSION }}"
        
        # 创建带v前缀的标签
        git tag "v${{ env.VERSION }}"
        
        # 推送提交和标签 (使用PAT确保权限)
        git push
        git push --tags
        
        echo "Changes committed and pushed. Tagged version v${{ env.VERSION }}"

    - name: Create Release
      if: steps.check.outputs.update_needed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        body: |
          Updated to libmaxminddb version ${{ env.LIBMAXMINDDB_VERSION }}
          
          ### Changes
          - Updated libmaxminddb source code to version ${{ env.LIBMAXMINDDB_VERSION }}
          
          ### Installation
          ```swift
          dependencies: [
              .package(url: "https://github.com/SunboyGo/MaxMindDBSwift.git", from: "${{ env.VERSION }}")
          ]
          ```
        files: PackageOutput/**/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
